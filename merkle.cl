


typedef unsigned int uint32;
typedef unsigned long uint64;
typedef __uint128_t uint128;
typedef uint64 word;
typedef uint128 doubleword;

#define paramT 24
#define paramn = 64
#define paramN = 1536
__global word prime = 0xfffffffffffffeff; // Solinas, 2^64 - 2^8 - 1

// MDS Matrix
__global word mds_matrix[24][24] =
  {{0x0aaaaaaaaaaaaaa0, 0x70a3d70a3d70a366, 0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be},
  {0x70a3d70a3d70a366, 0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550},
  {0x93b13b13b13b131d, 0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc},
  {0xd097b425ed097a71, 0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3},
  {0x2db6db6db6db6d89, 0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500},
  {0x08d3dcb08d3dcb00, 0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e},
  {0x0888888888888880, 0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682},
  {0xb5ad6b5ad6b5acb5, 0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8},
  {0x07fffffffffffff8, 0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74},
  {0x4d9364d9364d9317, 0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644},
  {0x0787878787878780, 0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b},
  {0xbe2be2be2be2bd6d, 0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580},
  {0x5c71c71c71c71c15, 0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63},
  {0xc8a60dd67c8a6014, 0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440},
  {0xb5e50d79435e5021, 0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571},
  {0xb7cb7cb7cb7cb713, 0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da},
  {0x0666666666666660, 0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7},
  {0x31f3831f3831f351, 0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc},
  {0x73cf3cf3cf3cf35b, 0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8},
  {0x05f417d05f417d00, 0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b},
  {0x7a2e8ba2e8ba2e11, 0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e},
  {0xb05b05b05b05afaa, 0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0},
  {0x3d37a6f4de9bd33d, 0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0, 0x7e2519f89467e1d3},
  {0xa8d9df51b3bea2be, 0x0555555555555550, 0x1a1f58d0fac687bc, 0x3851eb851eb851b3, 0x0505050505050500, 0xc9d89d89d89d890e, 0x6f1826a439f65682, 0xe84bda12f684bcb8, 0x61bed61bed61be74, 0x96db6db6db6db644, 0xce98b3a62ce98a6b, 0x0469ee58469ee580, 0xd0456c797dd49b63, 0x0444444444444440, 0x53ef368eb0432571, 0xdad6b5ad6b5ad5da, 0xa28a28a28a28a1e7, 0x03fffffffffffffc, 0xa17a17a17a17a0d8, 0xa6c9b26c9b26c90b, 0xd226357e16ece46e, 0x03c3c3c3c3c3c3c0, 0x7e2519f89467e1d3, 0xdf15f15f15f15e36}};

word round_constants[1200] = {0x240ec2a793108b4a, 0x753452ad8cbbbecb, 0xa3612a53da19a265, 0x18a083f17b5a94eb, 0x30d1c3ecb4f44b99, 0xaea865a3e5830f71, 0x4a9134c89190acc6, 0xed37c99a612065b1, 0xafd9964e15975e77, 0xa77147766c1ff75e, 0x1f075012654c408f, 0xc5e11b29262d9283, 0x6b6495600eb3ac52, 0x2b3b599ae4fa1d12, 0x90cda513782b872f, 0x78d9b4ea0f82d0e9, 0xbcbe92c86e626013, 0xa24fb10ca2a94fe8, 0xca3d8d1ebcc8b0b8, 0x01f19977b5ae425b, 0xdcb91f4a2ee555e1, 0x522fc03d8de5625b, 0x8093493f225f5fe0, 0xe34925160dd8ac6a, 0x0d849db4c9677f3e, 0xdb3c9dba3951d80a, 0x69ebf310531af9cb, 0x618c6e79c2131c9a, 0xf753bfda5bea2713, 0xc764d2dcfe66b834, 0x1428f86c920dc41f, 0x32eec3f568ba6a6a, 0xd348b99d1be142d1, 0x5a54339e5cf85764, 0xfcfcfcd93a85db2c, 0x5bf91d3330de1254, 0x7497efbc720c4d29, 0xb7f823baf4fb4ad3, 0xecbdc0ce5ce155f7, 0x1e98e24a11060158, 0xd68cc1bc7a734e3b, 0x8b5192beefe56d76, 0xcb37590292ed5d94, 0x3c0f4ac4442e718d, 0x7f28481f271ac458, 0x95a29062b8b7ef10, 0x5e35d63f60ebe7a4, 0x6f0cce8765194a54, 0xb2c5368f33cfdb88, 0x23d4c5242d9031d8, 0xa01e66ab5e6bf11d, 0x37b3c3f35a2c2db7, 0x6b0f16e664da3bc7, 0xa2edd28b4157761c, 0x772f8d3d4b7bbe30, 0x067d7f034ea64273, 0x9c04b9ef0ad21b49, 0xec615fcfe5fb17e3, 0xe5d5a133b594b39d, 0x5575c2ad9cfb2e71, 0x8b8bec6fa05ae8ec, 0xfdfe46961b74f8ca, 0x81826d165c8db1f4, 0xebb8dd7f53d2873a, 0xa74d8725a61f697c, 0xa48bbebeb12e5ba1, 0x1dc2cfba8304fb0d, 0x121ce1466d109dd6, 0x2e4a7c3aba839378, 0x540a4d98e030dcdc, 0x215ac5039c8dacf7, 0x8627aac1074f6776, 0xbd9f007a00342dad, 0x0485d9997c5d2d43, 0xf73dc1f105ba7b82, 0x75dfe4727676a769, 0x9226a74d24479a98, 0x1f9526e943307c60, 0xf8ec7859af0ac374, 0xbf084ca320167a51, 0x19225ef89b83a433, 0x4eea3af3cf87a21d, 0x5f32bfe642a25785, 0xee18341408e7109e, 0x095086a0fd9e22f4, 0x24bbb72c5af99867, 0xf0bdd8ee27e7a897, 0x19c9f25475ec0a13, 0x9fae6ed0f262b68c, 0x8521b8743284e615, 0x11341ea6613ab6ed, 0x66efe6ca18cd3dca, 0xf1ac5951a2934237, 0x22f7e35282498908, 0xb5bcdc16593c6674, 0x865eaa9fa7c40873, 0x9dee60da82ac4465, 0x22735f881786cc39, 0x6de9f9171436b66e, 0xf2aadeaa6a66b7ad, 0x4aacc905f9272cb4, 0x2c2714c649e42a81, 0x76d73405217d9dc7, 0xc883b51c111a8c32, 0x75dc8b2a293b801a, 0xcca8a5875b768909, 0xb9fd56aef43fe7cc, 0xafbfec0102d26c2c, 0x5157f8d356757a65, 0x26e3b538e13b9d5c, 0xca1497b238a3dc52, 0x995c0df77c5b3940, 0x7ff238ddc7075582, 0xa6efe8632d790673, 0x3f402fcafb803b75, 0xd0a9b5989fa80648, 0xd731da881957d177, 0xce282dcdbed66f47, 0x1270fea846832c28, 0x873da44928addef1, 0x3946531d53229dec, 0x5f09a6e3919f98c7, 0x8ea315a8fc0618f9, 0x4fd30e28e515e81c, 0x2cdbf5e36d8c63a5, 0xcce53304047e771a, 0xb710cb8e0564ca50, 0x1631a30bdc219de3, 0xde3e13bfac4ab80c, 0xc37e18414100ead5, 0x99e5043b30387161, 0x3c6bb225d1d78d15, 0x65c5d73b4a5f9807, 0x137c582109bc3643, 0x05f762e5b1d480fd, 0xb389c617c45d5bd0, 0x2a23ba94c54ad1ef, 0xeb4440f0a237d56a, 0x9d503447cce854b3, 0xfc5b688737c2aae9, 0x80f39542543f321c, 0xbaf3e8826b9e7c31, 0x1f7e8de645be342f, 0xd5c2dcab1d053e13, 0x986a4a8db3280f18, 0x4b242191c7dadd25, 0x50882bd23adf7857, 0x09f16b633e545bdc, 0x5e0981215a746ce5, 0x9ece3a04ded2e454, 0x8a7d4f600e85d88b, 0xab49152709ed581d, 0xed825bf8b3d32ab2, 0x1f37d6e31dd92ee7, 0x4a766830058f5e67, 0xd413d3bb4acf6432, 0x93da3397b6581f7a, 0x5fd4de23b579e4f8, 0xcf0bb8b34bfed3e6, 0x1a31a6eccc154f82, 0x4ec5a45b2444daea, 0x5cb0b6b9fe239e7e, 0x35a035640d1457f8, 0x6dbc1e53fa738977, 0x5efa24c87a749e3a, 0x27613437239afc6b, 0xfca89d793bf3a0c1, 0x993a7c1d8b509373, 0xae990f255bf5e977, 0x7b7acad0dea808d9, 0xe4df51bda3d6834a, 0x3e7516a279ce8e04, 0xc50749a33a60fb83, 0x8eb497c64e56d7a9, 0xade425408c5d2fe5, 0xb6f34f730c10daa1, 0xbcef2e56ac305d87, 0x2d2a447c10e46c62, 0x1580f32c34717e21, 0x84053458cf464329, 0xd8fa9ab59dde6961, 0x82980512e0d69940, 0x4cde6a69a159dce9, 0xa504dce40d2b5a48, 0x110ca7f7d0cda6e2, 0xfa09f77131f1452e, 0xb3226a341171e6d4, 0xdf3271ee4ddcd610, 0x10245cd637f7d033, 0x9e9b54ded7e50b22, 0x55f509f254b7e35e, 0x770305e05b566059, 0xc25639019180ef24, 0x34f10edac360c5f9, 0xa916820e3a4c0aa4, 0x771e31cdca908142, 0xc7483c5e864b3503, 0xa3c46f88d2848a1f, 0x8038982788e3a966, 0x260490d7c9225b8b, 0x8f29b9bc9c9ff52b, 0x9eca64a99a2f4512, 0x173ae30db15d3cf4, 0x9dc0ad665c6f198e, 0x08809d47fe8b8830, 0x062ae1e794799105, 0x87d4e118f187c9df, 0x909427dfb26e7106, 0xdd6ae0ed2b860e28, 0xb29665bd1eb2afa6, 0x2c63db6fd4ee02dc, 0x35c5a2ffd39bc2ce, 0x875f62e7c53fc417, 0xe19d89ac6f2bc4fb, 0x0d14634389245057, 0x6be7c3348405623a, 0x68a0148f85f02014, 0x053b66589a569cb6, 0x953b226a62f08b4c, 0x09d4508bb4810fc0, 0x95518a3826b0eec2, 0xb75ab99956105ca8, 0xc82371d676d48c9a, 0x61b15247a05e9c21, 0x33af269eff1f825d, 0xd629b9b9047ab8ea, 0xc93068d389e2d4ea, 0xac10466f4b976c59, 0x31d1ce7704841862, 0x0a484569fa243d73, 0xd7a6b9d534870cdc, 0x11750c56d10c784f, 0xc094fa6698940e8d, 0x8ddd68efe3868d4c, 0x7c0096350bc9bfb6, 0xf425dd1b76edfbd3, 0xb6ab8ce0383e8a33, 0x622e65b931dbac28, 0x0b5568d0bf077fe9, 0xd6e3591de846152b, 0xf239f23fd08164f9, 0x4863be619ee92e84, 0x24e8d490749e33e9, 0xa9000176c5e951c1, 0xe088ea688b9eb620, 0x0a7427f52cbf104a, 0xcd0e6c197f77b6b1, 0x94be36b10c7d4930, 0xf74e110bc09d2f2f, 0x8441201952f59356, 0x109867dbccc9dd66, 0x5f164f533a6359e7, 0xe572a712fc2b0ed3, 0x757d2ee09f334594, 0xad328750d711a41d, 0x5f24ae2d9e2b69f9, 0xb497f3cd4100261f, 0xb308050e303f7083, 0x2b862ca16302f6ae, 0x95b657d9d9f5021b, 0x2e7d16c5bbaaef02, 0x70a4d93ec31ae87f, 0x88554a56246d7163, 0x9e5b0ac6ce73c344, 0x87607583c1f22021, 0xeb490685514ade4e, 0x80ff79b55c59e727, 0xebaab6d2fe22b19f, 0xc2e80030efcee83e, 0xf75b0bb78bb6fcfb, 0xd1febaed89c8cb71, 0xf9992ff4f4c50249, 0x256fa25efeee82d5, 0x0c59050402658413, 0xbead2aec63e55865, 0xfc4be776b30fe386, 0x9494dddf06460fb5, 0xac11debba14ab0ca, 0xe3943487764df091, 0x5084dbd61e210259, 0x47b0cfcd64112240, 0x3f8b1ad5c852a1ab, 0x918dbd53ea331324, 0x7a3ee799ce4a33b8, 0x91e359bcb7886b42, 0x184ea8a19fa8ae99, 0x25d77e20eddd6354, 0x348d82eacc7718e2, 0x6602f76a41d1efe1, 0xdaf23c2e098b09bd, 0xd7b8be850e0e57a1, 0xc51e7df4f8855070, 0xb1bd2ff2feeb1804, 0x840b56248453fd57, 0xf3ceed3a8b5099a3, 0x8fdedc805119ddbf, 0x79ce965dfd546956, 0x7ffc046b04f5959a, 0x8385d3fed9b19240, 0x9f400d4ee91cf32b, 0xc1626c4b5968cc63, 0x594d31369bdf5d9a, 0x7b005ffaf67c2a4b, 0x592f256ff08a2eb4, 0xb55605f825a8bf54, 0x1a2e6ad796384de0, 0x892c2daaf915145e, 0x972487031937f2ac, 0xf899e0e4bfc61c05, 0xd412469ff6514f25, 0x93157c74b40e7b75, 0x8f95241bbb036960, 0x774bbff0a2135e8b, 0xbece3caa5fca59e2, 0xa70f7a3af5a9af91, 0x2053124fc4c73004, 0xb0903b76b359c884, 0x0a0091105a5b5bf1, 0x9a9f5c0ca297c144, 0xe300fb7474171a63, 0x6abcf1d301c6552c, 0x6975ffd56f93dedd, 0x31be996a361e8ce4, 0x469a5228c8ac765a, 0x907c31250ecc3ecc, 0x2021c7cd003ce15b, 0x1a2e2d1f753025b0, 0x4341fba21850eba1, 0x06ee53f346a972fb, 0x9c9fb9f30f5c983a, 0x865d837be8597cc1, 0x4fb0998a2c433786, 0x95c3f50201471ad8, 0xa2a730f4f6e815f7, 0xad5c75c0774d82a8, 0x05dfdad6814c0599, 0x5f1162f7dc6cd441, 0x3ec558a534156b7c, 0x00acc4391da75e5c, 0xd12933dfbb3ea285, 0xb521625654a8a6fa, 0x221da50d9cddf162, 0xaa3549f789c9ec03, 0x44c4834b23cf5e75, 0x40d60d6766edb0ee, 0xd021a7d957ba9d47, 0xe0f75a57c3f5372a, 0x27b7495ad99cb77b, 0xf0c0945d125d1dd6, 0x607465043244b65f, 0x878ff223416a7ecc, 0xe80317ceaa25121a, 0x63f6f68286976720, 0x415e604f07cd1961, 0x53d80907802c1448, 0xfd3470ac4a2afb79, 0x2fec40d8e0a914ba, 0xafb4d0b5fddbea45, 0xa174d4056ef97d30, 0x2cbc5c415f9e0bbc, 0x81ef52c672737433, 0x37b315d8abe01173, 0x81641522ec336fa2, 0xd1dcb4006f75db80, 0xe01057583981c09d, 0xe15c2fdbd2fa0868, 0x1b7b78b61a3adab3, 0xd8e6a93d4858d348, 0x8a9e5a25ed078c23, 0xbc503d55df63fe72, 0xa248824148455705, 0x810b1b6390aa9aea, 0xfeb4c64541d2c29b, 0x346c14905f941eb8, 0xd1fb93e8f22b778f, 0xe82c8622350aafc1, 0xee6db701e484e24e, 0x13701c397195d477, 0xcf00aef6b66f3d86, 0x99620f5303aa7218, 0x387d20fbeee11457, 0x5dfdba7cf8c9a1f2, 0xdf2ac0bd2470f86c, 0xdfcc435769de8316, 0x94c961a6d5467e9d, 0x8e8792275ff2233b, 0x0dd14a0dc251e970, 0x575289c45dfc9e0a, 0x042ab718496919ee, 0xc206f9ac07c65176, 0xebb7fad74d70cc85, 0xd57ebb65db572846, 0xdd09c80720ceed7d, 0x873c363f00095267, 0x2e383339276e4093, 0x4f0d0782b2c8b737, 0x8f878fc66a5a7850, 0xe843f529068ac009, 0xcda19e17f3b54390, 0x855fbf51c0d6c44a, 0x212b33c109a9e69c, 0x7a8e8eed51fab217, 0x60ac3668f0153a22, 0x988f514a0249e121, 0x224ec281d7c0658e, 0xb644df07c7e8553c, 0xf5f41c3b9b9e2877, 0x3ebacfb67a9a3d27, 0x65146220a3a8c0a9, 0x590cbc85158d1978, 0xd7f05c8122ec1932, 0xc3b6a635b5cc96fe, 0x6c27c5d509479abf, 0x213cd7dabcd6e78d, 0x838394a5431c2262, 0xd5126b30e589b46b, 0xbeee79d6fd4f84df, 0xb5c0145be96a54e5, 0x9978b1c70566a3f4, 0x32aa9454c633afec, 0xaff40f199d069bed, 0x4ff14e9914976425, 0x8a65f1d1eb6a251e, 0xefe6eac0a5eda30d, 0xffc68f979de172e4, 0xbcb3db712bcc55c6, 0x93acf1aa6e8a9d22, 0xbbe2e847cf55cf43, 0x69ab97e431cee092, 0x881245ef49e2630e, 0xcd7dd1ce9d922e0c, 0x45c5d132ef40296d, 0x343f80118aefd015, 0x43465c962ccdfc2b, 0x82721cb7b420ca20, 0x78e7e78fb9546ff6, 0xfd29b50d0f75dd85, 0x45d0c2853e73e828, 0x1927823b3659c972, 0x36973da7f6c94489, 0x6b6b7abda0c9022f, 0x246554ee3f49b7f5, 0xdb2e964cd295f4a9, 0x60176cb18febc37a, 0xab3ee9f462bb182f, 0x85a63e3a23c517cd, 0xf3eafd818e849912, 0xa71a472887e42560, 0xa8497584dacae693, 0x5a767c9b5af33d10, 0xbc7c55b85a3ec210, 0xe05d645b6ae931f2, 0xc12786849459e0f6,
    0x40ba491713c91141, 0xd00653990ca2882c, 0x011bcce2af8947b3, 0x7e02974d92a00607, 0xb83b5cb0bcdccf43, 0x564bab91568042d0, 0x1c63e60462c4e019, 0x5554fc74434296c4, 0xc5203ce4d2739ea0, 0x4ac41c9434f93808, 0x605ecbf7258c092a, 0x2f3a78ef34ad4ae9, 0x044889efdd9aa67f, 0xb5e2e07a2f599281, 0xe09b7e66b2c03bf3, 0xe03e874ed19e14a6, 0xda7ebb461927ebcb, 0x804471a032f8915f, 0x1396b9bb6811a42c, 0xdd71d36258b06442, 0x130df22639f33fac, 0xf61739314787dee8, 0x1887569c23e6e352, 0x014ba79f34e6fce3, 0x8045bf85289d78cc, 0x12e4ebbbe7d1cad1, 0x375005b5be5091a7, 0xc2a39a6a726ba40c, 0xf05f642162cae0f3, 0x7bf8d2344d8714c0, 0xa1b07d2740c5faae, 0x50ce5b0d7dfbe741, 0x0be409c08d9ffb8c, 0xdae3b133e3c164f0, 0x93f7463331946134, 0x71e4d4584114328a, 0xf145cbdd12d6d7ab, 0x50edee2f406941b9, 0xd3972131bd7eada0, 0x24fa8cd71b4eae21, 0xb52034e8b78ceccd, 0x5249785d00660bcf, 0x8ef3991c1d400dee, 0x5157a39b1bc5fa46, 0xc5ccf2b41253d1a6, 0xb78b560cbb846e87, 0x4b4858ceff78d344, 0xd83782e72665a5fb, 0x67a9b40fdec2b07b, 0xd2fdbef12ded02a8, 0x377e3ced59300b66, 0x6f8626cd1f73b995, 0xdbdc5ac70c2f1db5, 0xf8474fb2755d4e52, 0xc791b175eb895c14, 0x1ce7e03901233257, 0x07e72c154695f91a, 0x9695730685df4b7a, 0x25f649edc3d06122, 0xbbc643aedc69500e, 0x0ac606eca1196a1b, 0xacb6ad902f55b53d, 0xa13dc1c7adf23c50, 0xb2b2a9f836838c1d, 0xae3a777f83e462c1, 0x15275af835c10949, 0xf0616aa86758e9bb, 0xa64e610900966808, 0xb72da03bfcc05953, 0xc91ec7c060da1d68, 0xcc58e551844cdad2, 0xafc7268b6bd92069, 0x859f91cb011a2187, 0xeef1076c8c7109a6, 0xbd2795d1630214c8, 0xf366d8583f32ea90, 0xf26c94a7546605d7, 0x0cd09180d78fa6b3, 0x4b7868ba6da62733, 0x62d296ec2054b6ee, 0x3dd83963b81ec606, 0x3d2dea21bf186e22, 0x0759723dc6d59f04, 0x36f4b39344cdc1f5, 0xf1d951516ea80e3b, 0xaee081f9d2fa1142, 0xa95fa79a5453e3e6, 0xd13c71f5c90d60c0, 0xe1ea6eb5dbbd2563, 0xf6839746449acd72, 0xd92905f95cfe48e6, 0x209b2f366ecd2d4d, 0xce2e7a3e32324698, 0x307af7f7ff6ef841, 0x12c470229ba56c9d, 0x42a7437137c34811, 0x7209d7d7c6d65434, 0xbca149c078e914ce, 0xffc49dfcd00ed664, 0x24f7cf8fe7e0ebaa, 0xa2836a607ecf9828, 0x71a10299f72567e9, 0xb47f36509cf355b5, 0xc83fc41d0d1387e7, 0xb2a2e236f27469f9, 0xadbb4aba85a35fbc, 0x5199ef01f475e0df, 0x9030bf2f679c8866, 0xd7ce53a695f7c660, 0x6c56c712bfdea91f, 0xb9964f64638eb87a, 0x96790e4df82e0dac, 0x87ff84ee04028999, 0xc5bd94c7598bd77b, 0x7d82e4f8ada3e307, 0xc8c25a74c4c80ddb, 0x44b2ba2d02469440, 0xe429cf826b538f50, 0x364022b037f9bd59, 0x19bfca9a2421a5f2, 0x3a1e127d18a6b2d8, 0xa72c048d26b5c02a, 0x9ef51363798d048e, 0x650e70ba374f8db5, 0x6aa7c0b89fa7d5f3, 0x88b59973686e621e, 0x53479cfe59a786bf, 0x393e059636a6735a, 0x31199a2b2e9e05ec, 0xa4f1abfa5aea6c88, 0x6e57a3d21676bce0, 0x648390659ac120f1, 0xffe5d8bd45073a28, 0xe2aec08796d412eb, 0xd347bcb985bd6c98, 0xce0be57d467fd41b, 0xa8c83853d9af14f2, 0xf2211480b0cac644, 0x938f699af2dccbaf, 0xb5f5585d07dd3121, 0x39099d919a9a3433, 0xaa31e0631af4715d, 0xaed0ee6513f2cd4a, 0x47c60ff2682d341a, 0xc7812f2b15b4d1c0, 0xfd13a34b8bdf9af8, 0x100ea11c5c02a404, 0x2f0a1c653891e702, 0xd6d2b8ad02557ca7, 0xcebae0203537d09e, 0x829e335708b96814, 0x95e7f17e7bb094a6, 0x53541780a28f6e18, 0x6075e3de5bd7e4df, 0x61f56e8ad7b19960, 0x6e4c9b37600f1298, 0xe7b01b104244bcd9, 0x9c59cbdbcc51730b, 0xbc47bb031af028cf, 0x3677d3f2bd7eeca2, 0x5d3cb61dccac5d9e, 0x6d0b31a5fb3c271d, 0xb21f6400fd086c35, 0xa5fb3f7142e2d9fc, 0x49d215dc37a4313a, 0xfd046175519309e7, 0xf37ffeb64a905ef2, 0x7c16568222e76963, 0xe0fbb7ddc23ecade, 0xc4bfcb6d955556e5, 0x7a9b4d3d8e70e092, 0x8a30e5ff5d50ac6d, 0x1adc4117aca7caf1, 0xb397b866e8c18dc1, 0x0315877f5ab16f1f, 0xd79dc8738277eede, 0xf1ee68fd8c4d3aa6, 0xcdd815ad10f3834e, 0x727f0450278fd96e, 0x05d8afec32159d95, 0x78ad7ee8c3005e00, 0x41c1f7322006f816, 0x1bf427789d4c9f03, 0x22559a72310bc8fe, 0xc968299e1aaa9593, 0x272e87ff7e8ca57d, 0xd853ba580423f8b7, 0x25a6a2652962b61b, 0xd72766740e4bf870, 0x99987cf5b4436055, 0x4244398c17c22202, 0xe71d4852d6bd938e, 0xa8124c28da8f5da1, 0x698aad54b6358897, 0x17eac6edeb5aa21e, 0x5c79fd334ba05e3b, 0x27dfd5b99390ca5f, 0xe517455cdb5a27fa, 0xda6ee59dd844e902, 0x5eed7395c9efd87c, 0x84768c0f366370d4, 0xc46e6a652e90ab6b, 0x7304ecb2ff74d8fb, 0x83fb32e11b5418b9, 0xfd626f0ca458a9ae, 0xd48ac456c9f462c9, 0x5128eb899b5f75c5, 0x5ba2bdacf5ae830b, 0xb8bee4829965e53d, 0x47c114b4995cbc8e, 0xfa27bd1981b8543a, 0xb91bcb4485bc5b59, 0xc999ee357e5d0743, 0x2173126bce0998e5, 0x49306fb62698731e, 0xa95a7c3f9576d83e, 0xfed02e83d4cb644e, 0xfac42a6f4a7f607f, 0xdfa297bb91b31272, 0x0e2e3c036265540f, 0x9060f6606046fbf7, 0xfaa97293e53ff0b7, 0x28bb9cb0805584a6, 0x6c76dbf284b55b0b, 0x2b08abd4cb230179, 0x9713b036303ff459, 0x071b9537f8addba2, 0x31cb52ff38df889e, 0x0f2757d0b09b6b30, 0x83c3771da4d8f83e, 0x5455bcbc815449cf, 0x3b5aec0339c8bc05, 0xa023e8373d94ad70, 0xf98f6707b5e68e51, 0xeb0c99b28c5508ba, 0x8da4d717d6917f93, 0xd261a675ccaf0931, 0xd5ac7aebd2b5ab72, 0x9bee6daeff38425f, 0x688011c60c30d6f7, 0x9c6b9936f6b3b9e5, 0x73bdd705b0ef2be0, 0x28289d4a28a54c54, 0x52c4bbb7d087e0f8, 0xfd028b8920ef5e02, 0x3cdc0ff7e59699eb, 0xd6d948108134638c, 0xe114acaa4c3c7d44, 0x9f443556896ac48b, 0xa546b2a580aa8ca4, 0x7d839e119987f989, 0x9101b1a8c4ad4469, 0x69a14fd05b19b55d, 0xf554d5b5618bd2aa, 0x5af442dd1fc7ff5f, 0xe378d24d574f010b, 0x761aa0126e3bbb3e, 0x20f6d7fe7bf14d2e, 0x25aa59b22c9fbf84, 0x4f02ed1014fc219b, 0x82e28b79a0eef764, 0x0d329d2cefe21731, 0x3a4ee27972d0dbde, 0x6e23cc36261cd6f5, 0x02ea8241936a6cfb, 0x55cc05da8fae5b12, 0xa90c564c08445fde, 0x180f8e092fed112e, 0xd89394347fb37ccc, 0xeed6dd94e3077f04, 0x9b3d610eb0584ea4, 0x0573568abc4f5f00, 0x1d6c0c843d0d4dae, 0x671fb868f854194f, 0x6437126fb961b1ec, 0x463e793dee4d9e2f, 0x76f0c73db26b157e, 0xb2c0aecb000f747d, 0xec7d1cb611a266d8, 0x4fa4f66a60a36091, 0x826f76d6f80183ea, 0x2843f937fd6a675f, 0x984947368b15fe4c, 0x779372cb8e381b52, 0x13fe5bab707ea772, 0x8e6e834aa2cd1289, 0x7d22216e61f0dee1, 0x245350de5cb46e4b, 0x9dbb500860cd6712, 0xbe597a8b4b069982, 0x3ad1b353edbaf673, 0x667ef1006abcc989, 0x38e70f5c0d67908b, 0x95e48ba2454e460c, 0xe2a81cd03dead17d, 0x6b69a35eb55dacef, 0x5634d202b959d2a0, 0x8a30d0c7f8c83dd1, 0xbf5a8c87d40706a9, 0x5ae5ef83e9ac0076, 0xb491df1aa73d6fb4, 0xe913d2e56bde6c13, 0x7a20706e10be6553, 0xc0914b7b61c2231c, 0xe402818266090a19, 0x30e29bbc92bd9db6, 0x20ed8a2340989360, 0x0ee6b25adb7d8843, 0x2d2466efc9756196, 0x3c3ca3f34074d640, 0x965cc36b32fbeaa6, 0x4e98b8c90139ef3f, 0x2d6f913039305ddf, 0xf19ce84275b3b415, 0x9778578df08450a1, 0xf5813cde7940e9fa, 0x27ddb44c869b7490, 0xaf2eecbbbb197d15, 0x60722a845b50ac53, 0x47aea498ffc86edf, 0xa739f4ccd04a04a8, 0xbd156b3f461d10f9, 0x3673e4ee07f55b4b, 0xea16bc46d7fda0a9, 0x9ed60fdc47c5e224, 0xf1e517356674bc62, 0x94ac118cb773c6d9, 0x1846f2e1f730ca84, 0x0da8dbbbbfb7209f, 0x4592e046592644d5, 0xad7aa930d0d469ac, 0x99736d4e28861066, 0x9e636862e7596b6c, 0x8f05eb07a269a38e, 0xd60215c99722304d, 0xa7114abea10880ac, 0xffd6a07c924f53df, 0x583bf00ff1ee3f81, 0x5383e8d7806dfa1f, 0x46c4d34efb63f9db, 0xa9f56ca621f90a66, 0x958d68e21b36119b, 0xace22145470d8c30, 0x5921de12d02bc56d, 0x186a5f66f7e77137, 0xa4068544766903df, 0x5cec9d8696fb83e1, 0xfb550b5b153acdcd, 0x20dafe1c3b31724c, 0x997137cdde38fd72, 0x1f6d9058b062b702, 0x712d0e95a3c04481, 0xd3ddb1fbee50282f, 0xf46898bcb147f20a, 0x1ef0be8b7b50d90f, 0xa203b69049d27c00, 0x3718ef214103a0d1, 0x6129a6307caa0a5c, 0x19b35e6a87c8d3de, 0xa850f00b52e2177d, 0x2e6ddb8d286f0b81, 0xbe22607525b0a81f, 0x3dde291194e0a586, 0x3848c993fb25ff4c, 0xe8550d6fc96fc367, 0xfa4eafcb414335b4, 0xc9a12df85369d0e1, 0x0756b33d4cf9fdab, 0x41caf75b9b1e5154, 0xa6d08d62b9f8c1fa, 0x139a4789d699ab85, 0x3b250d01c625e2b4, 0x79c2a0a694bc7344, 0x7a9634781feb0453, 0x28709070219c3888, 0x18d43dc90c766164, 0x96b197a9d7fec243, 0x6fdb315e0b664e19, 0x2d5a72ad9ff0a223, 0x21a660dc694cad1a, 0xde66dbca71296555, 0x8b9e2138082f39cc, 0x83b76f5f9019fa60, 0x6727154e298567c6, 0x8014b7cf50fcf44a, 0x59aecc78a111919f, 0xd580d1b6174962ad, 0xe2127af8d8c6639e, 0x14689b44f07f27a7, 0x22860a42a7709db9, 0x313383d0d3ecfea5, 0x69dc82fe5e3cc50c, 0xb50650f38fcd8de4, 0xc7297add6656b203, 0xcec8479a0b714f2d, 0x1d1ccdad0255fbaa, 0x99867e3b621f7d30, 0xd2a074f618f9ed42, 0x5e80ace956c30fd9, 0x0930031426cda7af, 0x3b0d03a444d464ec, 0x02e8ed651effc795, 0x72191d54caf16c3c, 0xe473a3be39f0fa8e, 0x4914efcb54dfeab5, 0xa21d9b8552313764, 0xa6cb35459cd95761, 0x03b8ce7c85abe70b, 0xf66d518698bc6eff, 0xe9079b2516ce426e, 0x6471c069e3c17550, 0xcd64faef6c52643c, 0x4f963f7b51922df4, 0xf6009bd08c73c6d2, 0xc71d08f3d13de6f4, 0x3b1ed22f80fa82c3, 0xf1882a71ce2859eb, 0xbfe279e8499f2dec, 0x54cb4fa6c6be308d, 0x6c3d82e4e9ed1d9d, 0x0ff589c6cbc212da, 0xb3514e7139cb0328, 0x2c53d223b5fb5a39, 0x709cc2a80f049c41, 0xe8fb8d3130fcf235, 0x9c9040c07493bef5, 0xaf8e363e73b8b361, 0xa6e3c3aba13e09bd, 0x79dcc5f55ef2f040, 0x0eaac826f504c07f, 0x92961be29e469a47, 0x0b534f28ff6d906d, 0xcf5ed6bb2c792d00, 0x1ec64ef488a8b24e, 0xd11859b8c56ab3ab, 0xa48e86dae35bff75, 0x59fa8f477aca7351, 0xe70d8916c8ff3374, 0x60f79cb9198ad65e, 0xef8804c9febcea16, 0x94ebb692fb5d2fa8, 0xb2257a02c0160830, 0xd09cb1b0513e78b0, 0xf9811869c819ce1d, 0x44e0d1445828d654, 0xae17216f4d20f631, 0x71171627c0193c68, 0x469997e36229103f, 0xec4c9c9bb63a2ba7, 0x628dbef89ed49a13, 0x2b7a3b090e565df0, 0xfafc8c3584d01c52, 0x9dddee38bac55605, 0x2eace0fd4bdc8f2e,
    0x9bab98753169ef2b, 0x72151d0952d4796f, 0x48cb578a6ab90f3e, 0x554c30d0161710b4, 0x661dba38f827fbec, 0xf877ace6428051ab, 0x4b485b8cc79d8fa8, 0x74566cb59791222e, 0x39fd592c33bc3003, 0xc9abe364462f3573, 0x1295898195f3b36b, 0xca56b8e9b975c195, 0x0181fdaff9c10f30, 0xe2f0a7ca6bcff392, 0x101c1f38e8dd1a31, 0x3dd471d02454744c, 0x266d6c6913519430, 0x1d0c774c31e053f7, 0x784b69b94ae1b40f, 0x4ade01e00964a69c, 0x78cf4e5889eef68c, 0x26f7c05ff2facc43, 0x3df47fba4095e9a0, 0xdbaaf5f8c8d20dea, 0x0b611475faf422fd, 0xa829d7ce1d02ca1c, 0xec2104f2c96099cf, 0x5a8b994e05f70de0, 0x8552861229cbe819, 0x57f976d342a40446, 0x0c50b26b8fd41dd7, 0x8f4a7b45af8da415, 0x88db23899c2db2ee, 0x2151520c1b4cc4ba, 0x078e6f60fd354bbb, 0x3a034737d997b190, 0x1bc72398c2e17119, 0xbb556a68f988edb9, 0x4e56cc27d8b96076, 0xe6b057bd10954e3e, 0x96aeb5015844e919, 0x5f244c6fa3f0e809, 0x561fab8847e58dea, 0xe016ea05acf432e6, 0x0bc460928dc229d2, 0x09adb5e8baa2b7a3, 0x62e144bd9e8b6eed, 0x7a20dc37ccc7eea7, 0x53f0f051290e8ce8, 0xfffbf2ef9342c295, 0xc5c08db5b1e0c0ef, 0x6c813a08e5e52187, 0xdf3c8b2b30bd5710, 0x00b8052ff9ed3bc7, 0xab4809bc5e153283, 0xbdaf55e55e5a946c, 0xc8ae40ffe329aafd, 0xc03db8737d5e9b0e, 0x111573eb26c19ece, 0x6f21e1e5f038457d, 0x09aa79c6bf5572cb, 0x758aa3623eb60afd, 0xad78dfde49e9c154, 0x49394ac17a464193, 0x501987164c82506c, 0xdc6bde1d3317ffc7, 0xa62aae96bc33c54d, 0xaf511b412091131c, 0x7cac9808671412ff, 0x741fd789fb29b2b0, 0x49a762ff7b1fabbd, 0x04adb6fc05912379, 0x14772edd7d7f544c, 0x4062543d96637f8b, 0xa98e93e4ec0a752c, 0x419e5745a6372907, 0x221762f9de62d8cd, 0x0520d8cb581b7ff7, 0x35f92a620ab3f59b, 0x050ae41494a0a27d, 0xbd30173dba7c09e0, 0x95b76cb9a4cacf40, 0xd8ca73b24ded4f0e, 0x0ac67b34aecac78d, 0x7be7b4f6d85eb6ce, 0x887f5d9c98f3ccd4, 0x429a406291c1d58f, 0x13bcf186d5a050d4, 0xfd11e4b4c7939f69, 0xdf681f54bc29bba9, 0x4fda999dc485474a, 0xd6e47cf174037c2f, 0x41301e4b94127914, 0x8acd75a2e9a2f121, 0x57d7c037fed25bd7, 0xafaf80639a2aaec1, 0xa2649a6cc4088945, 0x17a3332b2a7c8646, 0x170f082cd1466641, 0xded4aa0c8927774d, 0x0a2969d6cce86e0f, 0x693d0b3ee4e55638, 0x5d9e689eac721c7a, 0x1a129e54784a71f4, 0x8dbc32d3877435e5, 0xa219d6f8d67fb022, 0xde823f0c6d7709ec, 0xb377effc344827a3, 0x9df05eb0ab57d1ee, 0x789e366e3b504906, 0x704a90ff93a4e052, 0x85cfed78eb1d7ab1, 0x9d6a8656f295d65d, 0x6b26de5af87d1f60, 0x0d9673a9705b3470, 0x2cf7d74f496cf38a, 0xbc6b922a0ec7009b, 0x5e95a43c1fc2ada2, 0x93d4969823a82170, 0x953bc3e78eac5f99, 0xb33d84f1dd399d57, 0x0c3475cb0974502f, 0xb6917879b1f8b749, 0x641a76bcb920c65c, 0x34611e733e6ef5b8, 0xbf737a4fc375cfd9, 0xf2f9638aa8f154a9, 0x46f503e21d935d21, 0x53600931ac352abc, 0x2764f7e2e5237664, 0x1d6bacf9c6650060, 0xcf4bc37bf99a4e6b, 0x34802651fea4b8b5, 0x1cc4fc6478c6d11f, 0xc56e321f654bb5d8, 0xa6d9cdcceeb5c8cc, 0xda766866344c37ef, 0x6a90d4a70ce6b086, 0x035b50d7743c2306, 0xd906110ba001a3ce, 0x33a01e3f6cfab462, 0xb5b532f25dbd9466, 0x9ce78a37168fcd38, 0x822e446049a84c39, 0x874113bb78fd52be, 0x72a0c4d7aaab60fd, 0xcd2b89710f9423d4, 0x0216fe71bc29d813, 0xd4d2d065e4ad2233, 0x305d55187271839d, 0xf2a44cc81e6f4dbf, 0xacc1da2b5a9b8f66, 0x0154a616803e72cd, 0x3fc328932f58f585, 0x197f581291038e85, 0x39750fd4c813c6b0, 0x1c2f50bf687d1373, 0xb1d355cffcde7559, 0x14c772d3a98d3162, 0x11849c30d1c92cd7, 0xb5cfd644f687e777, 0xe662fe6d83e1f722, 0xeb65e48248913f90, 0x88089e653e075f5e, 0x93fba0181750da8c, 0x7a522cac2f8e851f, 0x7e1f8d0115cd79d6, 0x55008c2f99027408, 0x2d3287c0fecb1991, 0xa22eead2131972c0, 0x6dcbdc57ea9c4126, 0xc5577594c155ec40, 0x044fc62405e8998d, 0xe3304c9597934077, 0x0b1bec02c7c4da46, 0x8fd0ce31d874b415, 0x9576e4c579e62946, 0x974c1306045a9c59, 0x4d83760cfd572ebb, 0x5be607bb8bd5e3b0, 0xa5bf00b8cee12762, 0x5d86fc92254bf1a6, 0xbb273b9aeff85b27, 0xb9af0c1c79b1e711, 0xe6583740574607e3, 0x1e7cec13824741eb, 0xaedcb4539357df03, 0x30ffba4475593e5d, 0xcfb5db962e4d9e6f, 0xb8897614b54b3a1a, 0x148ff920c6ed9022, 0x920b1042483a8f04, 0x187035c46c96c545, 0x347087af158ef7b5, 0xab402ab8e746c824, 0x91ede8faa74fb33b, 0xc8c6c501b82dbcf0, 0xd1f040a1fa2747bd, 0x7dcc2d38ec5840c5, 0xa21126cb270c510f, 0xfaae1c31ef073c32, 0xdd8e6b07dc91e942, 0xb624a110f8cec227, 0xaec163de17b50d75, 0x678539dd6657647e, 0xf5472b15e51ca3ae, 0xf9bd4fae8c4e0b44, 0x90d75fb40243a42d, 0x06cf8cccdb5eff03, 0xec36c5ec208bfe45, 0xb75ca64c88217854, 0x5a4bc3334e241d0e, 0x2b23492e6063f85a, 0x7b07e58b81603e5a, 0x541af67609b9d04e, 0x5cd610b1f6246f85, 0x557ca8c4fd6776ad, 0xd97c831c21e88b90, 0x174f7d54d9d9ebe9, 0xf381dbbf3498b78a, 0x986f29f1dc6e598b, 0xa4718a7b5e12563b, 0x1c787a410022f5c4, 0xda7395c3602c0e8d, 0xb5e17ac67f3b33c1, 0x0f3794f298c7d83b, 0x44f2e69345b39d48, 0xd82ef1a33153e174, 0x303d6d48e5ba749f, 0x534d65a3905f9baa, 0x23a024244f9ad197, 0x1ee65c492e0a0e8b, 0xb7e245c51d7100f9, 0x761145af8b8c62da, 0x8cc36f8952dc42c8, 0x2b7e69e7a5ea4a0f, 0x72ca1d2aa1d2d24b, 0x35139f449c283994, 0x36702c2161c46599, 0x3b4e0430e0ef8417, 0xc9176d096a15fbec, 0xf83041f965907f2c, 0x9a7470d3dd819638, 0xc0cf55fe02efee75, 0x582653ec01605c82, 0x436f4e4a8692b837, 0xc705aaeb883b7a3c, 0x6f73d2f95c563b8e, 0xa82726ad84b40689, 0xd52492971accce8b, 0x64a4790fa27a593d, 0xd3eab2d93291c84a, 0x0cff7054ddd38e24, 0x1b3fde4439d1a41b, 0x4899536f581c6130, 0xc0dc2a69b29afae8, 0xb00c7556fc92a6dc, 0x34d60584c0d06da2, 0x5b47803e783bcdb0, 0xcc47dbfd08511624, 0x159df2d8cbc557c0, 0xf25d94eda71ee8e9, 0xd65814552132ff4f, 0xa40e83a8323bf379, 0x092b4aed35d1f724, 0x675505ed1a7ae4b1, 0x651e165e37ecadfc, 0x547c0c5d44890135, 0x68f3f86b14571bef, 0x69b3eabdb1f93e06, 0x8e9446a2306273a7, 0xe56bc7dd7e269d86, 0xd268629e15540a61, 0xcc1ae494f6cbe85c, 0xf9b67e546f345d61, 0x1f2a1dcc922535ab, 0xcb32f767dd99c7ea, 0x7c5484ced2210dc2, 0xee7e959891973ed7, 0x5a8854c0aa276e78, 0xebbd2c49615891f5, 0xc3e702e07c097227, 0x14062e4969cfd241, 0x119201016761e94c, 0xdeb61fcfef6c8164, 0x4728d6620731f961, 0xd35f176670a0fb71, 0x1c389c333b9b48df, 0x3a2f748490b79666, 0xee1cdc0805cb5f53, 0x8f671e24771a48ea, 0xad05502389b8498c, 0x1e180b87e426c7ff};

void pf_64_add(word* c, word* a, word* b) {
  // if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    // std::cout << "[WARNING - ADD] Input value not in field!" << std::endl;
  // }
  doubleword r = (doubleword)(*a) + *b;
  if(r >= prime) r -= prime;
  *c = (word)r;
}

// Probably not needed
void pf_64_sub(word* c, word* a, word* b) {
  // if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    // std::cout << "[WARNING - SUB] Input value not in field!" << std::endl;
  //}
  doubleword r = (*a > *b) ? (*a - *b) : (*a + prime - *b);
  if(r >= prime) r -= prime; // Needed for the unlikely case where *a == *b
  *c = (word)r;
}

void pf_64_mul(word* c, word* a, word* b) {
  // if((doubleword)(*a) >= (doubleword)(prime) || (doubleword)(*b) >= (doubleword)(prime)) {
    // std::cout << "[WARNING - MUL] Input value not in field!" << std::endl;
  //}
  doubleword r = ((doubleword)(*a) * (doubleword)(*b));

  // Solinas indices:
  // s0: 00 01 02 03 04 05 06 07
  // s1: 08 08 09 10 11 12 13 14
  // s2: 15 09 10 11 12 13 14 15
  // s3: 00 15 00 00 00 00 00 00

  word temp_var;
  doubleword x_tmp;
  x_tmp = r & 0xFFFFFFFFFFFFFFFF;
  x_tmp = x_tmp + (((r >> 64) & 0xFF) | (((r >> 64) & 0x00FFFFFFFFFFFFFF) << 8)) +
    (((r >> 120) & 0xFF) | (((r >> 72) & 0x00FFFFFFFFFFFFFF) << 8)) +
    (((r >> 120) & 0xFF) << 8);
  if(x_tmp >= prime) x_tmp -= prime;
  if(x_tmp >= prime) x_tmp -= prime;
  if(x_tmp >= prime) x_tmp -= prime;
  *c = (word)x_tmp;

  /*
  // Crandall reduction (requires prime = 0xFFFFFFFFFFFFFFC5)
  doubleword r = ((doubleword)(*a) * (doubleword)(*b));
  word c_small = 59;
  doubleword q_i = r >> 64;
  r = r & 0xFFFFFFFFFFFFFFFF;
  doubleword t;

  // WHILE 1.1
  t = c_small * q_i;
  r = r + (t & 0xFFFFFFFFFFFFFFFF) * (q_i > 0);
  q_i = t >> 64;

  // WHILE 1.2
  t = c_small * q_i;
  r = r + (t & 0xFFFFFFFFFFFFFFFF) * (q_i > 0);

  // WHILE 2.1
  if(r >= BigIntLib::modulo_[0]) r -= BigIntLib::modulo_[0];

  // WHILE 2.2
  if(r >= BigIntLib::modulo_[0]) r -= BigIntLib::modulo_[0];

  *c = r;
  */
}

void pf_64_cube(word* c, word* a) {
  word t1 = 0;
  word t2 = 0;
  pf_64_mul(&t1, a, a);
  pf_64_mul(&t2, &t1, a);
  *c = t2;
}

// TODO(why): this looks pretty easily parallelized, and we *are* on a gpu
void mds_vec_mul(word* vec_c, word* vec_a) {
  word tmp[paramT];
  word tmp_word = 0;
  memcpy(tmp, vec_a, paramT * sizeof(word));
  memset(vec_c, 0x0, paramT * sizeof(word));
  for(uint32 i = 0; i < paramT; i++) {
    for(uint32 j = 0; j < paramT; j++) {
      // std::cout << "a: " << to_string_hex(&(mds_matrix[i][j]), ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      // std::cout << "b: " << to_string_hex(&(tmp[j]), ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      pf_64_mul(&tmp_word, &(mds_matrix[i][j]), &(tmp[j]));
      // std::cout << "a * b = c: " << to_string_hex(&tmp_word, ceil(((float)3 / WORDSIZE) * 8)) << std::endl;
      pf_64_add(&(vec_c[i]), &(vec_c[i]), &tmp_word);
    }
  }
}

void hadesmimc(char* in, char* out) {
  // Create permutation by fixing master key to 0
  // Does R_f rounds with full S-box layers, R_P rounds with partial S-box layers, and R_f rounds full S-box layers

  uint32 R_f = 4; // R_F = 2 * R_f
  uint32 R_P = 42;

  // Values to work with
  word value_branch[paramT];
  
  // Assign values (Remark: This assumes that all input values are in GF(p), which is true with a very high probability for random 64-bit input values and p = 0xfffffffffffffeff.)
  memcpy(value_branch, in, paramT * sizeof(word));

  uint32 constant_index = 0;

  // First rounds with full S-box layer
  for(uint32 k = 0; k < R_f; k++) {
    for(uint32 i = 0; i < paramT; i++) {
      // Round constant, Cubing
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
      pf_64_cube(&(value_branch[i]), &(value_branch[i]));
    }
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Middle rounds with partial S-box layer
  for(uint32 k = 0; k < R_P; k++) {
    for(uint32 i = 0; i < paramT; i++) {
      // Round constant
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
    }
    // Cubing for first branch
    pf_64_cube(&(value_branch[0]), &(value_branch[0]));
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Last R_f - 1 rounds with full S-box layer
  for(uint32 k = 0; k < R_f - 1; k++) {
    for(uint32 i = 0; i < paramT; i++) {
      // Round constant, Cubing
      pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
      pf_64_cube(&(value_branch[i]), &(value_branch[i]));
    }
    // Linear layer
    mds_vec_mul(value_branch, value_branch);
  }

  // Last round (without linear layer)
  for(uint32 i = 0; i < paramT; i++) {
    // Round constant, Cubing
    pf_64_add(&(value_branch[i]), &(value_branch[i]), &(round_constants[constant_index++]));
    pf_64_cube(&(value_branch[i]), &(value_branch[i]));
  }

  // Write to out
  memcpy(out, value_branch, paramT * sizeof(word));
}

void sponge_hash(char* message, char* hash, uint32 message_size) {
  // Assumes message_size mod 128 = 0
  uint32 num_absorption_calls = message_size / 128;
  uint32 num_r_words = 16; // 16 = (128 * 8) / 64

  // std::cout << "Number of absorption calls: " << num_absorption_calls << std::endl;

  // uint32 permutation_size = 192;
  char state[192];
  memset(state, 0x0, 192);

  // Do the permutation with the initial state of all zeros
  hadesmimc(state, state);

  // Absorbing
  word* temp;
  for(uint32 i = 0; i < num_absorption_calls; i++) {
    // Add part of the input to the LS r bits of the state (don't touch the MS c bits)
    for(uint32 j = 0; j < num_r_words; j++) {
      temp = (word*)(&(message[i * 128 + j * 8]));
      pf_64_add((word*)(&(state[j * 8])), temp, (word*)(&(state[j * 8])));
    }
    // Permutation
    hadesmimc(state, state);
  }

  // Take LS 32 bytes of the final output (this can also be parameterized including a squeezing phase)
  uint32 hash_size = 32;
  memcpy(hash, state, hash_size);
}

kernel void pos_merkle(global const char* data, const long leaves, const long round, global int* mutated){
    size_t id = get_global_id(0);
    size_t size = get_global_size(0);

    global uint* lhs = (global uint*)&data[32 * (id << (round + 1))];
    global uint* rhs = (global uint*)&data[32 * ((id << (round + 1)) + (1 << round))];

    hadesmimc((char*)lhs, (char*)lhs);

    pf_64_add(lhs, rhs, lhs);

    hadesmimc((char*)lhs, (char*)lhs);

}

static void hashXOR(global const uint* lhs, global const uint* rhs, global uint* md) {
  md[0] = lhs[0] ^ rhs[0];
  md[1] = lhs[1] ^ rhs[1];
  md[2] = lhs[2] ^ rhs[2];
  md[3] = lhs[3] ^ rhs[3];
  md[4] = lhs[4] ^ rhs[4];
  md[5] = lhs[5] ^ rhs[5];
  md[6] = lhs[6] ^ rhs[6];
  md[7] = lhs[7] ^ rhs[7];
}

kernel void xor_merkle(global const char* data, const long leaves, const long round, global int* mutated){
    size_t id = get_global_id(0);
    size_t size = get_global_size(0);

    global const uint* lhs = (global const uint*)&data[32 * (id << (round + 1))];
    global const uint* rhs = (global const uint*)&data[32 * ((id << (round + 1)) + (1 << round))];

    hashXOR(lhs, rhs, lhs); 
}
